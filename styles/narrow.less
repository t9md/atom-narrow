@import "ui-variables";
@import "syntax-variables";
@import "octicon-mixins";

// item-indicator
// =========================
.narrow-ui-item-indicator-base () {
  .octicon(chevron-right, 1em);
  padding: 0 .4em;
  left: 0;
  right: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

atom-text-editor .narrow-ui-item-indicator {
  .narrow-ui-item-indicator-base();
  color: @syntax-color-added;
}

atom-text-editor .narrow-ui-item-indicator-protected {
  .narrow-ui-item-indicator-base();
  color: @syntax-color-modified;
}

// row-marker
// =========================
@row-marker-color: fadeout(lighten(@syntax-color-added, 0%), 20%);

atom-text-editor {
  .line.narrow-line-marker {
    box-shadow: 0 -7px 0 -6px @row-marker-color inset;
  }
}

// match highlight
// =========================
.flash-animation (@name, @color) {
  @keyframes @name {
    from {
      background-color: @color;
    }
    to {
      background-color: transparent;
    }
  }
}
.flash (@name; @duration) {
  animation-name: @name;
  animation-duration: @duration;
  animation-iteration-count: 1;
}

@flash-color: fadeout(darken(@syntax-selection-flash-color, 10%), 20%);
.flash-animation(narrow-match-flash, @flash-color);

@match-base: @syntax-result-marker-color;
@match: hsla(hue(@match-base), saturation(@match-base), lightness(@match-base), 0.4);
@match-border-current: hsla(hue(@match-base), saturation(@match-base), lightness(@match-base), 1.0);

@match-ui: hsla(hue(@match-base), saturation(@match-base), lightness(@match-base), 0.2);
@flash-cursor-line-color: contrast(
  @syntax-background-color,
  darken(@syntax-selection-color, 3%),
  lighten(@syntax-selection-color, 3%)
);

// .flash-animation(narrow-editor-cursor-line-flash, @flash-cursor-line-color);
.flash-animation(narrow-editor-cursor-line-flash-short, @flash-color);
.flash-animation(narrow-editor-cursor-line-flash-medium, @flash-color);
.flash-animation(narrow-editor-cursor-line-flash-long, @flash-color);

atom-text-editor {
  .narrow-syntax-search-term {
    color: @syntax-color-function !important;
  }
  .narrow-syntax-include-filter {
    color: @syntax-color-keyword;
  }
  .narrow-syntax-exclude-filter {
    color: @syntax-color-removed;
  }
  .narrow-syntax-header {
    color: @syntax-color-variable;
  }

  .line.narrow-cursor-line-flash-short {
    .flash(narrow-editor-cursor-line-flash-short, 0.5s);
  }
  .line.narrow-cursor-line-flash-medium {
    .flash(narrow-editor-cursor-line-flash-medium, 1.0s);
  }
  .line.narrow-cursor-line-flash-long {
    .flash(narrow-editor-cursor-line-flash-long, 2.0s);
  }
  .narrow-match {
    .region {
      box-sizing: border-box;
      border-radius: @component-border-radius;

      background-color: @match;
      border: 2px solid transparent;
      transition: border-color .2s;
    }
    &.current .region {
      border-color: @match-border-current;
      transition-duration: .1s;
    }
    &.flash .region {
      .flash(narrow-match-flash, 1s);
    }
  }
}

atom-text-editor.narrow-editor {
  // block-cursor on read-only mode
  &.read-only {
    &.is-focused {
      .cursor {
        border: none;
        background: none;
        opacity: 0.5;
        background-color: @syntax-cursor-color;
        visibility: visible;
      }
    }
  }
}

// Hover Counter
// =========================
.narrow-control-bar {
  padding: @component-padding/3 @component-padding;
  vertical-align: middle;
  text-align: justify;
  font-size: 0.9em;
  div {
    display: inline-block;
  }
  span {
    padding: 0 @component-padding/3;
    display: inline-block;
  }
  a {
    padding: 0 @component-padding/3;
  }
  .base {
    .selected::before {
      color: @text-color-success;
    }
    ::before {
      color: @text-color-subtle;
    }
    .provider-name {
      color: @text-color-success;
    }
    .auto-preview {
      padding-left: 0;
      .octicon(eye, 1.0em);
    }
    .item-count {
      text-align: right;
      min-width: 25px;
      color: @text-color-warning;
    }
    .protected {
      .octicon(lock, 1.0em);
    }
    .select-files {
      .octicon(file-submodule, 1.0em);
    }
    .refresh {
      .octicon(repo-sync, 1.0em);
      &.running {
        .octicon(x, 1.0em);
        pointer-events: none;
        cursor: default;
        &::before {
          color: @text-color-error;
        }
      }
    }
  }
  .search-options {
    .search-regex {
      color: @text-color-info;
      &.invalid {
        color: @text-color-error;
      }
    }
  }
}
